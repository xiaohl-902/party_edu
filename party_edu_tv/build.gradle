import com.android.build.gradle.internal.dsl.ProductFlavor

import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {

    //签名配置
    signingConfigs {
        config {
            keyAlias 'dj' //key别名
            keyPassword '098765' //key密码,最好不要配置在脚本里
            storeFile file('D:\\fuyb\\documents\\signfiles\\ctv.keystore') //证书路径,证书最好不要放入项目源码
            storePassword '098765' //证书密码,最好不要配置在脚本里
        }
    }

    //编译sdk相关
    compileSdkVersion 25
    buildToolsVersion '27.0.3'

    //多渠道打包，在 def currentVersionCode = getVersionCode() 前，否则无法获取到对应的applicationId
    //flavor.name必须遵守驼峰命名，否则无法根据name准确找到applicationId
    productFlavors {
        //省统一版本（兼容老盒子包名）
        commonOld {
            applicationId "com.dj.ctv"//new:com.tv.dj,old:com.dj.ctv
            resValue "string", "app_name", "党教"
        }
        //四川省统一4K
        commonSC {
            applicationId "com.igreatstone.partyedu.sc"//new:com.tv.dj,old:com.dj.ctv
            resValue "string", "app_name", "浩石远教"
        }
        //资阳安岳4k
//        anyue4k {
//            applicationId "com.dj.anyue"
//            resValue "string", "app_name", "安岳党教"
//        }
        //南充西充4k
        ncxc4k {
            applicationId "com.dj.ncxc"
            resValue "string", "app_name", "西充党教"
        }
    }

    //版本和包名控制
//    def currentVersionCode = getVersionCode()
    def currentVersionCode = 512
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 25
        versionCode currentVersionCode
        versionName APP_VERSION_NAME + "." + currentVersionCode
        flavorDimensions "versionCode"
        /*ndk {
            // 如果您的工程有Native代码（C/C++）或者集成了其他第三方SO库，建议下载Bugly的NDK动态库
            // 设置支持的SO库架构
            abiFilters 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }*/
    }

    //编译类型控制
    buildTypes {
        release {
            //是否进行混淆
            minifyEnabled false
            //混淆文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //服务器地址和接口相关配置
            buildConfigField "String", "FIRST_LOGIN_URL", "\"http://${RELEASE_FIRST_LOGIN_IP}/${FIRST_LOGIN_URL}\""
            buildConfigField "String", "API_LOGIN_URL", "\"http://${RELEASE_SERVER_IP}/${API_LOGIN_URL}\""
            buildConfigField "String", "API_CONFIG_URL", "\"http://${RELEASE_SERVER_IP}/${API_CONFIG_URL}\""

            buildConfigField "String", "TERMINAL_TYPE", "\"${TERMINAL_TYPE}\""

            //加入签名配置
            signingConfig signingConfigs.config

        }
        debug {
            debuggable true  //启用debug的buildType配置

            //服务器地址和接口相关配置
            buildConfigField "String", "FIRST_LOGIN_URL", "\"http://${DEBUG_FIRST_LOGIN_IP}/${FIRST_LOGIN_URL}\""
            buildConfigField "String", "API_LOGIN_URL", "\"http://${DEBUG_SERVER_IP}/${API_LOGIN_URL}\""
            buildConfigField "String", "API_CONFIG_URL", "\"http://${DEBUG_SERVER_IP}/${API_CONFIG_URL}\""

            buildConfigField "String", "TERMINAL_TYPE", "\"${TERMINAL_TYPE}\""

            //加入签名配置
            signingConfig signingConfigs.config
        }
    }
    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def date = new Date()
            def timeNow = date.format('yyMMdd_HHmm')
            def buildType = variant.buildType.name
            def newName = APP_FILE_BASE_NAME + "_" + TERMINAL_TYPE + "_v" + APP_VERSION_NAME + "." + currentVersionCode + "_build_" + timeNow + "_" + buildType + ".apk"
            outputFileName = newName
        }
    }

    useLibrary 'org.apache.http.legacy'

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.loopj.android:android-async-http:1.4.9'
    implementation 'cz.msebera.android:httpclient:4.3.6'
    implementation 'com.lzy.net:okgo:+'
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation 'com.github.ybq:Android-SpinKit:1.0.4'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'me.zhouzhuo.zzhorizontalprogressbar:zz-horizontal-progressbar:1.0.0'
    //RX JAVA
    implementation 'io.reactivex:rxjava:+'
    // RX Android
    implementation 'io.reactivex:rxandroid:+'
    //a SharedPreferences replacement for Android
    implementation 'net.grandcentrix.tray:tray:0.12.0'
    //usage:https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/README-CN.md
    implementation 'com.blankj:utilcode:1.15.0'
    //compile 'com.tencent.bugly:crashreport:latest.release' //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    //compile 'com.tencent.bugly:nativecrashreport:latest.release' //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    testImplementation 'junit:junit:4.12'

    implementation  project(':base_mobile_player_lib')
    implementation 'com.jakewharton:butterknife:8.2.1'
    implementation 'com.githang:status-bar-compat:0.7'
    implementation 'com.google.guava:guava:11.0.2'
}

//自动修改version code
def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def runTasksStr = gradle.startParameter.taskNames.toString()
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def currAppId = getCurrentApplicationId() //渠道的APP ID
        if(currAppId == ""){
            //throw new GradleException("不能执行"+runTasksStr+"！请选择other/assemble*(Release|Debug)。")
            return
        }
        Object obj = versionProps.get(currAppId)
        if(obj == null){//如果不存在此包，添加属性
            versionProps.setProperty(currAppId, "0")
            versionProps.store(versionFile.newWriter(), null)
        }
        def versionCode = versionProps[currAppId].toInteger()
        //仅在*Release(如assembleRelease）任务增加版本号
        if(runTasksStr.contains("Release")){
            versionProps[currAppId] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
            println currAppId+"增加版本："+versionCode
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

//渠道的APP ID
def getCurrentApplicationId() {
    def currFlavor = getCurrentFlavor()
    def outStr = ''
    android.productFlavors.all { flavor ->
        if (flavor.name == currFlavor)
            outStr = flavor.getApplicationId()
    }
    return outStr
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String taskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern
    if (taskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(taskReqStr)
    if (matcher.find()) {
        String flavor = matcher.group(1)
        // This makes first character to lowercase.
        char[] c = flavor.toCharArray()
        c[0] = Character.toLowerCase(c[0])
        flavor = new String(c)
        println "getCurrentFlavor:" + flavor
        return flavor
    } else {
        println "getCurrentFlavor:cannot_find_current_flavor"
        return ""
    }
}
